{"version":3,"sources":["util/canvas.js","components/ColourPicker/Marker.jsx","components/ColourPicker/Palette.jsx","components/ColourPicker/HueScale.jsx","components/ColourPicker/ColourSwatch.jsx","components/ColourPicker/ColourPicker.jsx","App.js","reportWebVitals.js","index.js"],"names":["getClickCoords","element","clickEvent","boundingBox","getBoundingClientRect","x","clientX","left","y","clientY","top","getPixel","canvas","getContext","getImageData","data","getDimensions","width","height","Marker","position","style","Math","round","className","Palette","hue","onColourUpdate","useState","markerPosition","setMarkerPosition","last","useRef","canvasRef","useLayoutEffect","ctx","saturationGradient","createLinearGradient","brightnessGradient","addColorStop","fillStyle","fillRect","globalCompositeOperation","drawCanvas","current","ref","onClick","event","coords","colour","HueScale","onHueUpdate","hueGradient","i","onClickCapture","hueValue","ColourSwatch","background","value","readOnly","disabled","ColourPicker","props","setColour","setHue","hexString","slice","reduce","hex","component","toString","padStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64d67e88.chunk.js","sourcesContent":["/**\n * Gets the coordinates of a click event on a DOM element.\n *\n * @param {DOMElement} element\n * @param {object} clickEvent\n * @returns {{x: number, y: number}}\n */\nexport const getClickCoords = (element, clickEvent) => {\n    const boundingBox = element.getBoundingClientRect();\n\n    return { x: clickEvent.clientX - boundingBox.left, y: clickEvent.clientY - boundingBox.top };\n};\n\n/**\n * Gets the pixel data from the canvas, at the specified location.\n *\n * @todo Refactor to infer saturation & lightness values from position.\n *\n * @param {DOMElement} canvas\n * @param {number} x\n * @param {number} y\n * @returns {Uint8ClampedArray} [red, green, blue, alpha]\n */\nexport const getPixel = (canvas, { x, y }) => canvas.getContext('2d').getImageData(x, y, 1, 1).data;\n\n/**\n * Converts an RGBA array (or Uint8ClampedArray, returned by canvas' getImageData() method) to a\n * css hexadecimal colour, e.g. '#ff0000'.\n *\n * @param {number[]|Uint8ClampedArray} rgbaArray\n * @returns {string}\n */\nexport const rgbaToHex = rgbaArray => {\n    const rgb = rgbaArray.slice(0, 3);\n    return rgb.reduce((hex, component) =>  hex + component.toString(16).padStart(2, '0'), '#');\n};\n\n/**\n * The <canvas> element's `width` and `height` props are separate from the width and height set by\n * CSS rules; so it's necessary to infer them from the DOM and explicitly apply them to the canvas\n * (so that pixels on the canvas and screen have a 1:1 mapping).\n *\n * @param {DOMElement} canvas\n * @returns {{width: number, height: number}}\n */\nexport const getDimensions = canvas => {\n    const { width, height } = canvas.getBoundingClientRect();\n    canvas.width = width;\n    canvas.height = height;\n\n    return { width, height };\n}","import React from 'react';\n\nexport default function Marker({ position: { x, y } }) {\n    const style = {\n        ...(x !== 'undefined' ? { left: `${Math.round(x)}px` } : {}), top: `${Math.round(y)}px`\n    };\n\n    return (\n        <div className={'marker'} style={style} />\n    );\n}","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport { getClickCoords, getDimensions, getPixel } from '../../util/canvas';\nimport Marker from \"./Marker\";\n\nconst drawCanvas = (ctx, hue) => {\n    // TODO: See if <svg> or even <div> elements are faster... 🧐\n    const { width, height } = getDimensions(ctx.canvas);\n    const saturationGradient = ctx.createLinearGradient(0, 0, width, 0);\n    const brightnessGradient = ctx.createLinearGradient(0, 0, 0, height);\n\n    saturationGradient.addColorStop(0, `hsla(${hue},100%,50%,0)`);\n    saturationGradient.addColorStop(1, `hsla(${hue},100%,50%,1)`);\n    brightnessGradient.addColorStop(0, \"white\")\n    brightnessGradient.addColorStop(1, \"black\");\n\n    // Let the browser/GPU do the work...\n    ctx.fillStyle = brightnessGradient;\n    ctx.fillRect(0, 0, width, height);\n    ctx.globalCompositeOperation = \"multiply\";\n    ctx.fillStyle = saturationGradient;\n    ctx.fillRect(0, 0, width, height);\n    ctx.globalCompositeOperation = \"source-over\";\n};\n\nexport default function Palette({ hue, onColourUpdate }) {\n    const [markerPosition, setMarkerPosition] = useState({ x: 0, y: 0 });\n    const last = useRef({ hue, markerPosition });\n    const canvasRef = useRef(null);\n\n    const moveMarker = position => {\n        last.current.markerPosition = position;\n        setMarkerPosition(position);\n    }\n    const onClick = event => {\n        const canvas = canvasRef.current;\n        const coords = getClickCoords(canvas, event);\n        const colour = getPixel(canvas, coords);\n\n        moveMarker(coords);\n        onColourUpdate(colour);\n    }\n\n    useLayoutEffect(() => {\n        drawCanvas(canvasRef.current.getContext('2d'), hue);\n\n        if (hue !== last.current.hue) {\n            // The hue has been changed, so we need to update the colour.\n            onColourUpdate(getPixel(canvasRef.current, last.current.markerPosition));\n        }\n\n        last.current.hue = hue;\n    }, [last, hue, onColourUpdate]);\n\n    return (\n        <div className={'palette'}>\n            <canvas ref={canvasRef} onClick={onClick} />\n            <Marker position={markerPosition} />\n        </div>\n    );\n}","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport { getClickCoords, getDimensions } from \"../../util/canvas\";\nimport Marker from \"./Marker\";\n\nconst drawCanvas = ctx => {\n    const { width, height } = getDimensions(ctx.canvas);\n    const hueGradient = ctx.createLinearGradient(0, 0, 0, height);\n\n    for (let i = 0; i <= 360; i++) {\n        hueGradient.addColorStop(1 - i / 360, `hsla(${i},100%,50%,1)`);\n    }\n\n    ctx.fillStyle = hueGradient;\n    ctx.fillRect(0, 0, width, height);\n};\n\nexport default function HueScale({ onHueUpdate }) {\n    const [markerPosition, setMarkerPosition] = useState({ y: 0 });\n    const canvasRef = useRef(null);\n\n    const inferHue = event => {\n        const { y } = getClickCoords(canvasRef.current, event)\n        const hueValue = Math.round((1 - y / canvasRef.current.height) * 360);\n\n        setMarkerPosition({ y });\n        onHueUpdate(hueValue);\n    }\n\n    useLayoutEffect(() => drawCanvas(canvasRef.current.getContext('2d')), []);\n\n    return (\n        <div className={'hueScale'}>\n            <canvas ref={canvasRef} onClickCapture={inferHue} />\n            <Marker position={markerPosition} />\n        </div>\n    );\n}","export default function ColourSwatch({ colour }) {\n    return (\n        <div className={'colourSwatch'}>\n            <div style={{ background: colour }} />\n            <input value={colour} readOnly disabled />\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport Palette from './Palette';\nimport HueScale from './HueScale';\nimport ColourSwatch from './ColourSwatch'\nimport { rgbaToHex } from \"../../util/canvas\";\nimport './ColourPicker.css';\n\n/**\n * Renders a CSS colour picker [see example]{@link https://samchristy.github.io/ColourPicker/}\n *\n * @param {?function} onColourUpdate Optional callback that returns the colour as a CSS hex string.\n * @param {...*} props Properties for the component's <div> wrapper.\n * @returns {JSX.Element}\n * @constructor\n */\nexport default function ColourPicker({ onColourUpdate, ...props }) {\n    const [colour, setColour] = useState('');\n    const [hue, setHue] = useState(0);\n\n    const onColourUpdateCallback = colour => {\n        const hexString = rgbaToHex(colour);\n        if (typeof onColourUpdate === \"function\") {\n            onColourUpdate(hexString);\n        }\n        setColour(hexString);\n    }\n\n    return (\n        <div {...props}>\n            <Palette onColourUpdate={onColourUpdateCallback} hue={hue} />\n            <HueScale onHueUpdate={hue => setHue(hue)} />\n            <ColourSwatch colour={colour} />\n        </div>\n    );\n}","import React from 'react';\nimport ColourPicker from \"./components/ColourPicker/ColourPicker\";\nimport './App.css';\n\nexport default function App() {\n  return (\n      <>\n        <h1>Basic Colour Picker Demo</h1>\n        <ColourPicker className={'colourPicker'} />\n      </>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}