{"version":3,"sources":["components/ColourPicker/Marker.module.scss","components/ColourPicker/Palette.module.scss","components/ColourPicker/HueScale.module.scss","components/ColourPicker/ColourSwatch.module.scss","components/ColourPicker/ColourPicker.module.scss","util/canvas.ts","components/ColourPicker/Marker.tsx","components/ColourPicker/Palette.tsx","components/ColourPicker/HueScale.tsx","components/ColourPicker/ColourSwatch.tsx","components/ColourPicker/ColourPicker.tsx","App.tsx","index.tsx"],"names":["module","exports","getClickCoords","element","clickEvent","boundingBox","getBoundingClientRect","x","clientX","left","y","clientY","top","getPixel","canvas","getContext","getImageData","data","getDimensions","width","height","setAttribute","String","Marker","position","style","Math","round","className","styles","marker","Palette","hue","onColourUpdate","useState","markerPosition","setMarkerPosition","last","useRef","canvasRef","useEffect","current","ctx","saturationGradient","createLinearGradient","brightnessGradient","addColorStop","fillStyle","fillRect","globalCompositeOperation","drawCanvas","palette","ref","onClick","event","coords","colour","HueScale","onHueUpdate","hueGradient","i","hueScale","hueValue","ColourSwatch","colourSwatch","background","value","readOnly","disabled","ColourPicker","props","setColour","setHue","colourPicker","updatedColour","hexString","slice","reduce","hex","component","toString","padStart","updatedHue","defaultProps","App","console","log","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e9f978b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colourPicker\":\"Marker_colourPicker__1Wj5V\",\"marker\":\"Marker_marker__OBBT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colourPicker\":\"Palette_colourPicker__1KhTQ\",\"palette\":\"Palette_palette__1FRFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colourPicker\":\"HueScale_colourPicker__e4ErN\",\"hueScale\":\"HueScale_hueScale__1vD2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colourPicker\":\"ColourSwatch_colourPicker__1Pfi9\",\"colourSwatch\":\"ColourSwatch_colourSwatch__1zaU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colourPicker\":\"ColourPicker_colourPicker__1E2Ar\"};","/**\n * Gets the coordinates of a click event on a DOM element.\n */\nexport const getClickCoords = (\n  element: HTMLElement,\n  clickEvent: { clientX: number; clientY: number }\n): { x: number; y: number } => {\n  const boundingBox = element.getBoundingClientRect();\n\n  return { x: clickEvent.clientX - boundingBox.left, y: clickEvent.clientY - boundingBox.top };\n};\n\n/**\n * Gets the pixel data from the canvas, at the specified location.\n */\nexport const getPixel = (\n  canvas: HTMLCanvasElement,\n  { x, y }: { x: number; y: number }\n): Uint8ClampedArray | null => canvas?.getContext('2d')?.getImageData(x, y, 1, 1).data || null;\n\n/**\n * Converts an Uint8ClampedArray to a CSS hexadecimal colour, e.g. '#ff0000'.\n */\nexport const rgbaToHex = (rgbaArray: Uint8ClampedArray): string => {\n  const rgb = rgbaArray.slice(0, 3);\n  return rgb.reduce(\n    (hex: string, component: number) => hex + component.toString(16).padStart(2, '0'),\n    '#'\n  );\n};\n\n/**\n * The <canvas> element's `width` and `height` props are separate from the width and height set by\n * CSS rules; so it's necessary to infer them from the DOM and explicitly apply them to the canvas\n * (so that pixels on the canvas and screen have a 1:1 mapping).\n */\nexport const getDimensions = (canvas: HTMLCanvasElement): { width: number; height: number } => {\n  const { width, height } = canvas.getBoundingClientRect();\n  canvas.setAttribute('width', String(width));\n  canvas.setAttribute('height', String(height));\n\n  return { width, height };\n};\n","import React from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\nimport styles from './Marker.module.scss';\n\nexport default function Marker({ position: { x, y } }: InferProps<typeof Marker.propTypes>) {\n  const style = {\n    ...(typeof x === 'number' ? { left: `${Math.round(x)}px` } : {}),\n    top: `${Math.round(y)}px`,\n  };\n\n  return <div className={`${styles.marker} marker`} style={style} />;\n}\n\nMarker.propTypes = {\n  position: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import React, { useEffect, useRef, useState, MouseEvent } from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\nimport { getClickCoords, getDimensions, getPixel } from '../../util/canvas';\nimport Marker from './Marker';\nimport styles from './Palette.module.scss';\n\nconst drawCanvas = (ctx: CanvasRenderingContext2D, hue: number) => {\n  const { width, height } = getDimensions(ctx.canvas);\n  const saturationGradient = ctx.createLinearGradient(0, 0, width, 0);\n  const brightnessGradient = ctx.createLinearGradient(0, 0, 0, height);\n\n  saturationGradient.addColorStop(0, `hsla(${hue},100%,50%,0)`);\n  saturationGradient.addColorStop(1, `hsla(${hue},100%,50%,1)`);\n  brightnessGradient.addColorStop(0, 'white');\n  brightnessGradient.addColorStop(1, 'black');\n\n  // Let the browser/GPU do the work...\n  ctx.fillStyle = brightnessGradient;\n  ctx.fillRect(0, 0, width, height);\n  ctx.globalCompositeOperation = 'multiply';\n  ctx.fillStyle = saturationGradient;\n  ctx.fillRect(0, 0, width, height);\n  ctx.globalCompositeOperation = 'source-over';\n};\n\nexport default function Palette({ hue, onColourUpdate }: InferProps<typeof Palette.propTypes>) {\n  const [markerPosition, setMarkerPosition] = useState({ x: 0, y: 0 });\n  const last = useRef({ hue });\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const onClick = (event: MouseEvent) => {\n    if (canvasRef.current === null) return;\n\n    const coords = getClickCoords(canvasRef.current, event);\n    const colour = getPixel(canvasRef.current, coords);\n\n    setMarkerPosition(coords);\n    onColourUpdate(colour);\n  };\n\n  useEffect(() => {\n    if (canvasRef.current === null) return;\n    const ctx = canvasRef.current.getContext('2d');\n    if (ctx === null) return;\n\n    drawCanvas(ctx, hue);\n\n    if (hue !== last.current.hue) {\n      // The hue has been changed, so we need to update the colour.\n      onColourUpdate(getPixel(canvasRef.current, markerPosition));\n    }\n\n    last.current.hue = hue;\n  }, [last, markerPosition, hue, onColourUpdate]);\n\n  return (\n    <div className={`${styles.palette} palette`}>\n      <canvas ref={canvasRef} onClick={onClick} />\n      <Marker position={markerPosition} />\n    </div>\n  );\n}\n\nPalette.propTypes = {\n  hue: PropTypes.number.isRequired,\n  onColourUpdate: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useRef, useState, MouseEvent } from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\nimport { getClickCoords, getDimensions } from '../../util/canvas';\nimport Marker from './Marker';\nimport styles from './HueScale.module.scss';\n\nconst drawCanvas = (ctx: CanvasRenderingContext2D) => {\n  const { width, height } = getDimensions(ctx.canvas);\n  const hueGradient = ctx.createLinearGradient(0, 0, 0, height);\n\n  // No visible difference between 10 and 360 color stops, so may as well save some time...\n  for (let i = 0; i <= 36; i++) {\n    hueGradient.addColorStop(1 - i / 36, `hsla(${i * 10},100%,50%,1)`);\n  }\n\n  ctx.fillStyle = hueGradient;\n  ctx.fillRect(0, 0, width, height);\n};\n\nexport default function HueScale({ onHueUpdate }: InferProps<typeof HueScale.propTypes>) {\n  const [markerPosition, setMarkerPosition] = useState({ y: 0 });\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const inferHue = (event: MouseEvent) => {\n    if (canvasRef.current === null) return;\n\n    const { y } = getClickCoords(canvasRef.current, event);\n    const hueValue = Math.round((1 - y / canvasRef.current.height) * 360);\n\n    setMarkerPosition({ y });\n    onHueUpdate(hueValue);\n  };\n\n  useEffect(() => {\n    const ctx = canvasRef?.current?.getContext('2d');\n    if (ctx) {\n      drawCanvas(ctx);\n    }\n  }, []);\n\n  return (\n    <div className={`${styles.hueScale} hueScale`}>\n      <canvas ref={canvasRef} onClick={inferHue} />\n      <Marker position={markerPosition} />\n    </div>\n  );\n}\n\nHueScale.propTypes = {\n  onHueUpdate: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\nimport styles from './ColourSwatch.module.scss';\n\nexport default function ColourSwatch({ colour }: InferProps<typeof ColourSwatch.propTypes>) {\n  return (\n    <div className={`${styles.colourSwatch} colourSwatch`}>\n      <div style={{ background: colour }} />\n      <input value={colour} readOnly disabled />\n    </div>\n  );\n}\n\nColourSwatch.propTypes = {\n  colour: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\nimport Palette from './Palette';\nimport HueScale from './HueScale';\nimport ColourSwatch from './ColourSwatch';\nimport { rgbaToHex } from '../../util/canvas';\nimport styles from './ColourPicker.module.scss';\n\n/**\n * Renders a CSS colour picker [see example]{@link https://samchristy.github.io/ColourPicker/}\n *\n * @param onColourUpdate Callback that returns the colour as a CSS hex string.\n * @param className Optional class that can be applied to the component's wrapper <div>.\n * @param props Properties for the component's <div> wrapper.\n */\nexport default function ColourPicker({\n  onColourUpdate,\n  className,\n  ...props\n}: InferProps<typeof ColourPicker.propTypes>) {\n  const [colour, setColour] = useState('');\n  const [hue, setHue] = useState(0);\n\n  const onColourUpdateCallback = (updatedColour: Uint8ClampedArray) => {\n    const hexString = rgbaToHex(updatedColour);\n\n    onColourUpdate(hexString);\n    setColour(hexString);\n  };\n\n  return (\n    <div {...props} className={`${styles.colourPicker} colourPicker ${className}`}>\n      <Palette onColourUpdate={onColourUpdateCallback} hue={hue} />\n      <HueScale onHueUpdate={(updatedHue) => setHue(updatedHue)} />\n      <ColourSwatch colour={colour} />\n    </div>\n  );\n}\n\nColourPicker.propTypes = {\n  onColourUpdate: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nColourPicker.defaultProps = {\n  className: '',\n};\n","import React from 'react';\nimport { ColourPicker } from './components';\nimport './App.scss';\n\nexport default function App() {\n  return (\n    <>\n      <h1>ColourPicker Demo</h1>\n      {/* eslint-disable-next-line no-console */}\n      <ColourPicker onColourUpdate={(colour) => console.log(`🎨: ${colour}`)} />\n      <p>\n        🎨Created by Sam Christy -{' '}\n        <a href=\"https://github.com/SamChristy/ColourPicker\">see code on GitHub</a>\n      </p>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}